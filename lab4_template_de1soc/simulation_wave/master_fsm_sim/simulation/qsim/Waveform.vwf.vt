// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/20/2023 17:59:22"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          master_fsm_sim
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module master_fsm_sim_vlg_vec_tst();
// constants                                           
// general purpose registers
reg abort;
reg clock;
reg decode_finish;
reg init_finish;
reg key_found;
reg swap_finish;
// wires                                               
wire [1:0] addr_data_sel;
wire decode_start;
wire fail;
wire init_start;
wire pass;
wire reset;
wire [23:0] secret_key;
wire swap_start;

// assign statements (if any)                          
master_fsm_sim i1 (
// port map - connection between master ports and signals/registers   
	.abort(abort),
	.addr_data_sel(addr_data_sel),
	.clock(clock),
	.decode_finish(decode_finish),
	.decode_start(decode_start),
	.fail(fail),
	.init_finish(init_finish),
	.init_start(init_start),
	.key_found(key_found),
	.pass(pass),
	.reset(reset),
	.secret_key(secret_key),
	.swap_finish(swap_finish),
	.swap_start(swap_start)
);
initial 
begin 
#1000000 $stop;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #5000 1'b1;
	#5000;
end 

// key_found
initial
begin
	key_found = 1'b0;
	key_found = #40000 1'b1;
	key_found = #20000 1'b0;
end 

// init_finish
initial
begin
	init_finish = 1'b0;
	init_finish = #110000 1'b1;
	init_finish = #20000 1'b0;
end 

// swap_finish
initial
begin
	swap_finish = 1'b0;
	swap_finish = #200000 1'b1;
	swap_finish = #20000 1'b0;
end 

// decode_finish
initial
begin
	decode_finish = 1'b0;
	decode_finish = #310000 1'b1;
	decode_finish = #20000 1'b0;
end 

// abort
initial
begin
	abort = 1'b0;
	abort = #420000 1'b1;
	abort = #20000 1'b0;
end 
endmodule

