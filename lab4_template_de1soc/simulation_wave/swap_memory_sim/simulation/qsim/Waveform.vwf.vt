// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/20/2023 17:58:50"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          swap_memory_sim
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module swap_memory_sim_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [7:0] data_in;
reg reset;
reg [23:0] skey;
reg start;
// wires                                               
wire [7:0] address;
wire [7:0] data_out;
wire finish;
wire write_enable;

// assign statements (if any)                          
swap_memory_sim i1 (
// port map - connection between master ports and signals/registers   
	.address(address),
	.clock(clock),
	.data_in(data_in),
	.data_out(data_out),
	.finish(finish),
	.reset(reset),
	.skey(skey),
	.start(start),
	.write_enable(write_enable)
);
initial 
begin 
#1000000 $stop;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #5000 1'b1;
	#5000;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #320000 1'b1;
	reset = #20000 1'b0;
end 

// start
initial
begin
	start = 1'b0;
	start = #20000 1'b1;
	start = #20000 1'b0;
end 
// skey[ 23 ]
initial
begin
	skey[23] = 1'b0;
end 
// skey[ 22 ]
initial
begin
	skey[22] = 1'b0;
end 
// skey[ 21 ]
initial
begin
	skey[21] = 1'b0;
end 
// skey[ 20 ]
initial
begin
	skey[20] = 1'b0;
end 
// skey[ 19 ]
initial
begin
	skey[19] = 1'b1;
end 
// skey[ 18 ]
initial
begin
	skey[18] = 1'b1;
end 
// skey[ 17 ]
initial
begin
	skey[17] = 1'b1;
end 
// skey[ 16 ]
initial
begin
	skey[16] = 1'b1;
end 
// skey[ 15 ]
initial
begin
	skey[15] = 1'b0;
end 
// skey[ 14 ]
initial
begin
	skey[14] = 1'b0;
end 
// skey[ 13 ]
initial
begin
	skey[13] = 1'b1;
end 
// skey[ 12 ]
initial
begin
	skey[12] = 1'b1;
end 
// skey[ 11 ]
initial
begin
	skey[11] = 1'b0;
end 
// skey[ 10 ]
initial
begin
	skey[10] = 1'b0;
end 
// skey[ 9 ]
initial
begin
	skey[9] = 1'b0;
end 
// skey[ 8 ]
initial
begin
	skey[8] = 1'b1;
end 
// skey[ 7 ]
initial
begin
	skey[7] = 1'b1;
end 
// skey[ 6 ]
initial
begin
	skey[6] = 1'b1;
end 
// skey[ 5 ]
initial
begin
	skey[5] = 1'b0;
end 
// skey[ 4 ]
initial
begin
	skey[4] = 1'b0;
end 
// skey[ 3 ]
initial
begin
	skey[3] = 1'b1;
end 
// skey[ 2 ]
initial
begin
	skey[2] = 1'b0;
end 
// skey[ 1 ]
initial
begin
	skey[1] = 1'b0;
end 
// skey[ 0 ]
initial
begin
	skey[0] = 1'b1;
end 
// data_in[ 7 ]
initial
begin
	data_in[7] = 1'b0;
end 
// data_in[ 6 ]
initial
begin
	data_in[6] = 1'b1;
end 
// data_in[ 5 ]
initial
begin
	data_in[5] = 1'b1;
end 
// data_in[ 4 ]
initial
begin
	data_in[4] = 1'b0;
end 
// data_in[ 3 ]
initial
begin
	data_in[3] = 1'b0;
end 
// data_in[ 2 ]
initial
begin
	data_in[2] = 1'b1;
end 
// data_in[ 1 ]
initial
begin
	data_in[1] = 1'b1;
end 
// data_in[ 0 ]
initial
begin
	data_in[0] = 1'b0;
end 
endmodule

