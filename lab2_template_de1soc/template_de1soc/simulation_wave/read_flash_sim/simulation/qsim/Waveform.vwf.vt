// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/09/2023 12:17:41"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          read_flash_sim
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module read_flash_sim_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg data_valid;
reg read;
reg start;
reg wait_request;
// wires                                               
wire finish;

// assign statements (if any)                          
read_flash_sim i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.data_valid(data_valid),
	.finish(finish),
	.read(read),
	.start(start),
	.wait_request(wait_request)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// start
initial
begin
	start = 1'b0;
	start = #20000 1'b1;
	start = #30000 1'b0;
	start = #250000 1'b1;
	start = #30000 1'b0;
end 

// read
initial
begin
	read = 1'b0;
	read = #80000 1'b1;
	read = #30000 1'b0;
	read = #250000 1'b1;
	read = #30000 1'b0;
end 

// wait_request
initial
begin
	wait_request = 1'b1;
	wait_request = #140000 1'b0;
	wait_request = #30000 1'b1;
	wait_request = #250000 1'b0;
	wait_request = #30000 1'b1;
end 

// data_valid
initial
begin
	data_valid = 1'b1;
	data_valid = #200000 1'b0;
	data_valid = #30000 1'b1;
	data_valid = #250000 1'b0;
	data_valid = #30000 1'b1;
end 
endmodule

